//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025. 03. 27. 19:45:43
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace cnKepzesek
{

    public partial class KepzesekTabla : DbContext
    {

        public KepzesekTabla() :
            base()
        {
            OnCreated();
        }

        public KepzesekTabla(DbContextOptions<KepzesekTabla> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("KepzesekConnect"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Kepzes> Kepzesek
        {
            get;
            set;
        }

        public virtual DbSet<Oktato> Oktatok
        {
            get;
            set;
        }

        public virtual DbSet<Resztvevo> Resztvevok
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.KepzesMapping(modelBuilder);
            this.CustomizeKepzesMapping(modelBuilder);

            this.OktatoMapping(modelBuilder);
            this.CustomizeOktatoMapping(modelBuilder);

            this.ResztvevoMapping(modelBuilder);
            this.CustomizeResztvevoMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Kepzes Mapping

        private void KepzesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Kepzes>().ToTable(@"Kepzesek");
            modelBuilder.Entity<Kepzes>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Kepzes>().Property(x => x.Nev).HasColumnName(@"Nev").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kepzes>().Property(x => x.KezdesDatuma).HasColumnName(@"KezdesDatuma").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kepzes>().Property(x => x.BefejezesDatuma).HasColumnName(@"BefejezesDatuma").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kepzes>().Property(x => x.Hely).HasColumnName(@"Hely").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kepzes>().HasKey(@"ID");
        }

        partial void CustomizeKepzesMapping(ModelBuilder modelBuilder);

        #endregion

        #region Oktato Mapping

        private void OktatoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Oktato>().ToTable(@"Oktatok");
            modelBuilder.Entity<Oktato>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Oktato>().Property(x => x.Nev).HasColumnName(@"Nev").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oktato>().Property(x => x.Szakterulet).HasColumnName(@"Szakterulet").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oktato>().HasKey(@"ID");
        }

        partial void CustomizeOktatoMapping(ModelBuilder modelBuilder);

        #endregion

        #region Resztvevo Mapping

        private void ResztvevoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Resztvevo>().ToTable(@"Resztvevok");
            modelBuilder.Entity<Resztvevo>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Resztvevo>().Property(x => x.Nev).HasColumnName(@"Nev").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Resztvevo>().Property(x => x.Beosztas).HasColumnName(@"Beosztas").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Resztvevo>().HasKey(@"ID");
        }

        partial void CustomizeResztvevoMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Kepzes>().HasMany(x => x.Oktatok).WithMany(op => op.Kepzesek);
            modelBuilder.Entity<Kepzes>().HasMany(x => x.Resztvevoks).WithMany(op => op.Kepzeseks);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
